; Analog_Bridge configuration template
; Generated from environment variables at runtime

; The best way to think of this file is that there are two main sections, the USRP (analog audio) and
; AMBE_AUDIO (compressed audio).  Analog_Bridge will take everything sent to the USRP port and
; encode it for transmission on the AMBE_AUDIO port.  The encoder will use the format defined in ambeMode.
; As you might expect, the reverse direction is defined too.

; Analog_Bridge supports include files. More on this later...
include = dvsm.macro
; include = asl.macro

; General Section describes settings for Analog_Bridge itself.
[GENERAL]
logLevel = {{ LOG_LEVEL | default('1') }}                            ; Show messages and above 0=No logging, 1=Debug, 2=Message, 3=Info, 4=Warning, 5=Error, 6=Fatal

; Metadata management
exportMetadata = {{ EXPORT_METADATA | default('true') }}                   ; Export metadata to USRP partner (transcode setups require this)
transferRootDir = {{ TRANSFER_ROOT_DIR | default('/tmp') }}                  ; Export database files to USRP partner
subscriberFile = {{ SUBSCRIBER_FILE | default('/var/lib/dvswitch/subscriber_ids.csv') }}   ; DMR ID to callsign lookup data

; General vocoder setup information
decoderFallBack = {{ DECODER_FALLBACK | default('true') }}                  ; Allow software AMBE decoding if a hardware decoder is not found
useEmulator = {{ USE_EMULATOR | default('false') }}                     ; Use the MD380 AMBE emulator for AMBE72 (DMR/YSFN/NXDN)
emulatorAddress = {{ EMULATOR_ADDRESS | default('127.0.0.1:2470') }}        ; IP address and port of the md380 server

pcmPort = {{ PCM_PORT | default('2222') }}                          ; UDP port to send to the WebProxy

[USRP]
address = {{ USRP_PEER_HOST | default('127.0.0.1') }}                     ; IP address of USRP partner (Allstar/Asterisk or another Analog_Bridge)
txPort = {{ USRP_TX_PORT | default('32002') }}                          ; Transmit USRP frames on this port
rxPort = {{ USRP_RX_PORT | default('32001') }}                          ; Listen for USRP frames on this port
usrpAudio = {{ USRP_AUDIO | default('AUDIO_UNITY') }}                 ; Digital -> Analog (AUDIO_UNITY, AUDIO_USE_GAIN, AUDIO_USE_AGC)
usrpGain = {{ USRP_GAIN | default('1.10') }}                         ; Gain factor when usrpAudio = AUDIO_USE_GAIN (0.0 to 5.0) (1.0 = AUDIO_UNITY)
usrpAGC = {{ USRP_AGC | default('-20,10,100') }}                    ; Set the agc threshold (db), slope (db) and decay (ms)
tlvAudio = {{ TLV_AUDIO | default('AUDIO_UNITY') }}                  ; Analog -> Digital (AUDIO_UNITY, AUDIO_USE_GAIN, AUDIO_BPF)
tlvGain = {{ TLV_GAIN | default('0.35') }}                          ; Gain factor when tlvAudio = AUDIO_USE_GAIN (0.0 to 5.0) (1.0 = AUDIO_UNITY)

[AMBE_AUDIO]
address = {{ AMBE_PEER_HOST | default('127.0.0.1') }}                     ; IP address of xx_Bridge
txPort = {{ AMBE_TX_PORT | default('32004') }}                          ; Transmit TLV frames to partner on this port
rxPort = {{ AMBE_RX_PORT | default('32003') }}                          ; Listen for TLV frames from partner on this port
ambeMode = {{ AMBE_MODE | default('DMR') }}                          ; DMR, DMR_IPSC, DSTAR, NXDN, P25, YSFN, YSFW (encode PCM to this format)
minTxTimeMS = {{ MIN_TX_TIME_MS | default('2500') }}                      ; Analog -> Digital Minimum time in MS for hang delay (0-10000)

; The metadata below is used when ASL is the source since it does not have any concept of digital modes
gatewayDmrId = {{ GATEWAY_DMR_ID | default(MY_DMR_ID | default('1234567')) }}                  ; ID to use when transmitting from Analog_Bridge 7 digit ID
repeaterID = {{ REPEATER_ID | default((MY_DMR_ID | default('1234567')) + (MY_ESSID | default('01'))) }}                  ; ID of source repeater 7 digit ID plus 2 digit SSID
txTg = {{ GATEWAY_TALKGROUP | default('9') }}                                ; TG to use for all frames sent from Analog_Bridge -> xx_Bridge
txTs = {{ GATEWAY_TIMESLOT | default('2') }}                                ; Slot to use for frames sent from Analog_Bridge -> xx_Bridge
colorCode = {{ DMR_COLOR_CODE | default('1') }}                           ; Color Code to assign DMR frames

[MACROS]
; Where the macros are
; xxxx=yyyy
; xxxx is the dial string to match
; yyyy is the command line to execute

; xxxx must be preceded by a *
; xxxx can be any string (alphanumeric)
; yyyy is the command to execute
; yyyy will replace xxxx in the dial string

